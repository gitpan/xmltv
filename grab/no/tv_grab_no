#!/usr/bin/perl -w

=pod

=head1 NAME

tv_grab_no - Grab TV listings for Norway.

=head1 SYNOPSIS

tv_grab_no --help

tv_grab_no [--config-file FILE] --configure

tv_grab_no [--config-file FILE] [--output FILE] [--days N]
           [--offset N] [--quiet]

=head1 DESCRIPTION

Output TV listings for several channels available in Norway.  The
data comes from fredag.dagbladet.no. The grabber relies on parsing HTML so it
might stop working at any time.

First run B<tv_grab_no --configure> to choose, which channels you want
to download. Then running B<tv_grab_no> with no arguments will output
listings in XML format to standard output.

B<--configure> Prompt for which channels,
and write the configuration file.

B<--config-file FILE> Set the name of the configuration file, the
default is B<~/.xmltv/tv_grab_no.conf>.  This is the file written by
B<--configure> and read when grabbing.

B<--output FILE> write to FILE rather than standard output.

B<--days N> grab N days.  The default is as many as the source carries.

B<--offset N> start N days in the future.  The default is to start
from today.

B<--quiet> suppress the progress messages normally written to standard
error.

=head1 SEE ALSO

L<xmltv(5)>.

=head1 AUTHOR

Christian Wattengaard (christian@wattengard.com). Heavily based on
tv_grab_dk by Jesper Skov (jskov@zoftcorp.dk). tv_grab_dk
originally based on tv_grab_nl by Guido Diepen and Ed Avis
(ed@membled.com) and tv_grab_fi by Matti Airas.

=head1 BUGS

First release. Not aware of any bugs yet. But I'm sure there are some.

=cut

######################################################################
# initializations

use strict;
use XMLTV::Version '$Id: tv_grab_no,v 1.8 2004/05/08 10:04:47 epaepa Exp $ ';
use Getopt::Long;
use HTML::Entities; # parse entities
use IO::File;
use URI;
use HTML::TableExtract;
use Date::Manip;
use HTML::LinkExtractor;

use XMLTV;
use XMLTV::Memoize;
use XMLTV::Ask;
use XMLTV::Mode;
use XMLTV::Config_file;
use XMLTV::DST;
use XMLTV::Get_nice;
use XMLTV::Date;
# Todo: perhaps we should internationalize messages and docs?
use XMLTV::Usage <<END
$0: get Norwegian television listings in XMLTV format
To configure: $0 --configure [--config-file FILE]
To grab listings: $0 [--config-file FILE] [--output FILE] [--days N]
        [--offset N] [--quiet]
END
  ;

sub getchandisplaynames( @ );

# Use Log::TraceMessages if installed.
BEGIN {
    eval { require Log::TraceMessages };
    if ($@) {
	*t = sub {};
	*d = sub { '' };
    }
    else {
	*t = \&Log::TraceMessages::t;
	*d = \&Log::TraceMessages::d;
	#Log::TraceMessages::check_argv();
        #$Log::TraceMessages::Logfile = 'tv_grab_no.log';
    }
}

# Use Term::ProgressBar if installed.
use constant Have_bar => eval { require Term::ProgressBar; 1 };

# Whether zero-length programmes should be included in the output.
my $WRITE_ZERO_LENGTH = 0;

# default language
my $LANG = 'no';

# Winter time in Norway - summer time is one hour ahead of this.
my $TZ = '+0100';

sub process_summary_page( $$$ );
sub process_listings_page( $$$$ );

######################################################################
# get options

# Get options
XMLTV::Memoize::check_argv('XMLTV::Get_nice::get_nice_aux');
my ($opt_days, $opt_offset, $opt_help, $opt_output,
    $opt_configure, $opt_config_file, $opt_quiet,
    $opt_list_channels);
$opt_days   = 4; # default
$opt_offset = 0; # default
GetOptions('days=i'        => \$opt_days,
	   'offset=i'      => \$opt_offset,
	   'help'          => \$opt_help,
	   'configure'     => \$opt_configure,
	   'config-file=s' => \$opt_config_file,
	   'output=s'      => \$opt_output,
	   'quiet'         => \$opt_quiet,
	   'list-channels' => \$opt_list_channels,
	  )
  or usage(0);
die 'number of days must not be negative'
  if (defined $opt_days && $opt_days < 0);
usage(1) if $opt_help;
if ($opt_days > 7) {
    print "WARNING: This grabber can only grab 7 days ahead!\n-------: I will grab 7 days and then quit.\n";
    $opt_days = 7;
}

my $mode = XMLTV::Mode::mode('grab', # default
			     $opt_configure => 'configure',
			     $opt_list_channels => 'list-channels',
			    );

# File that stores which channels to download.
my $config_file
  = XMLTV::Config_file::filename($opt_config_file, 'tv_grab_no', $opt_quiet);

if ($mode eq 'configure') {
    XMLTV::Config_file::check_no_overwrite($config_file);
    open(CONF, ">$config_file") or die "cannot write to $config_file: $!";
    # find list of available channels
    my $bar = new Term::ProgressBar('getting list of channels', 1)
      if Have_bar && not $opt_quiet;
    my %channels = get_channels();
    die 'no channels could be found' if (scalar(keys(%channels)) == 0);
    update $bar if Have_bar && not $opt_quiet;

    # Ask about each channel.
    my @chs = sort keys %channels;
    my @names = map { $channels{$_} } @chs;
    my @qs = map { "add channel $_?" } @names;
    my @want = askManyBooleanQuestions(1, @qs);
    foreach (@chs) {
	my $w = shift @want;
	warn("cannot read input, stopping channel questions"), last
	  if not defined $w;
	# No need to print to user - XMLTV::Ask is verbose enough.
	
	# Print a config line, but comment it out if channel not wanted.
	print CONF '#' if not $w;
	my $name = shift @names;
        print CONF "channel $_\n";
	# TODO don't store display-name in config file.
    }

    close CONF or warn "cannot close $config_file: $!";
    say("Finished configuration.");

    exit();
}

# Not configuring, we will need to write some output.
die if $mode ne 'grab' and $mode ne 'list-channels';

# If we are grabbing, check we can read the config file before doing
# anything else.
#
my @config_lines;
if ($mode eq 'grab') {
    @config_lines = XMLTV::Config_file::read_lines($config_file);
}

my %w_args;
if (defined $opt_output) {
    my $fh = new IO::File(">$opt_output");
    die "cannot write to $opt_output: $!" if not defined $fh;
    $w_args{OUTPUT} = $fh;
}
$w_args{encoding} = 'ISO-8859-1';
my $writer = new XMLTV::Writer(%w_args);
# TODO: standardize these things between grabbers.
$writer->start
  ({ 'source-info-url'     => 'http://fredag.dagbladet.no/tv/',
     'source-data-url'     => 'http://fredag.dagbladet.no/tv/',
     'generator-info-name' => 'XMLTV',
     'generator-info-url'  => 'http://membled.com/work/apps/xmltv/',
   });

if ($opt_list_channels) {
    my $bar = new Term::ProgressBar('getting list of channels', 1)
      if Have_bar && not $opt_quiet;
    my %channels = get_channels();
    die 'no channels could be found' if (scalar(keys(%channels)) == 0);
    update $bar if Have_bar && not $opt_quiet;

    foreach my $ch_did (sort(keys %channels)) {
	my $ch_name = $channels{$ch_did};
	my $ch_xid = "$ch_did.tv.tv2.dk";
	$writer->write_channel({ id => $ch_xid,
				 'display-name' => [ [ $ch_name ] ] });
    }
    $writer->end();
    exit();
}

# Not configuring or writing channels, must be grabbing listings.
die if $mode ne 'grab';
my (%channels, @channels, $ch_did, $ch_name);
my $line_num = 1;
foreach (@config_lines) {
    ++ $line_num;
    next if not defined;
    if (/^channel ([0-9]+)/) {
        push @channels, $1;
    }
    else {
	warn "$config_file:$.: bad line\n";
    }
}

my $configbar = new Term::ProgressBar('fetching channel names', 1)
  if Have_bar && not $opt_quiet;
%channels = getchandisplaynames(@channels);
update $configbar if Have_bar && not $opt_quiet;

######################################################################
# begin main program

my $now = parse_date('now');
die if not defined $now;

my @to_get;

# the order in which we fetch the channels matters
my $today = UnixDate($now, '%Y-%m-%d'); die if not defined $today;
foreach $ch_did (@channels) {
    $ch_name = $channels{$ch_did};
    my $ch_xid = "$ch_did.fredag.dagbladet.no";
    $writer->write_channel({ id => $ch_xid,
			     'display-name' => [ [ $ch_name ] ] });
}

my %warned_ch_name; # suppress duplicate warnings
my $bar = new Term::ProgressBar('fetching data', @channels * $opt_days)
  if Have_bar && not $opt_quiet;
foreach my $d (0 .. $opt_days - 1) {
    my $i = $opt_offset + $d;
    my $day = UnixDate(DateCalc($today, "+ $i days"), '%Y-%m-%d');
    t "turned offset $i (from $today) into date $day";
    my $num_this_day = 0;
    foreach $ch_did (@channels) {
	my $ch_xid = "$ch_did.fredag.dagbladet.no";
	# Request day when constructing URL since it is represented as
	# an integere offset from today. Still pass in the computed
	# date - may need it sometime...
	my $url = 'http://fredag.dagbladet.no/tv/index.html'
	  . "?kanal_id=$ch_did&dag=$i&fra_tid=0&til_tid=24";
	push @to_get, [ $url, $day, $ch_xid, $ch_did ];
	my $got = process_listings_page($writer, $ch_xid, $url, $day);
	warn "no listings for channel $ch_xid on day $d, $url\n"
	  if $got == 0;
	$num_this_day += $got;
	update $bar if Have_bar && not $opt_quiet;
    }
    if ($num_this_day == 0) {
	die "could not get any listings\n" if $d == 0;
	warn "could get only one day of listings, not $opt_days\n" if $d == 1;
	warn "could get only $d days of listings, not $opt_days\n" if $d > 1;
	last;
    }
}
$writer->end();

######################################################################
# subroutine definitions

# Remove bad characters.
sub tidy ( $ ) {
    my $s = shift;
    $s =~ tr/\031//d;
    return $s;
}

# arguments:
#   XMLTV::Writer object to write to
#   XMLTV id of channel
#   URL to fetch
#   Date::Manip object giving day for programmes in page (at least
#     until they cross midnight)
#
# Returns number of programmes written.
#
my ($warned_discarding_parts, $commented_episode_num);
sub process_listings_page ( $$$$ ){
    #    local $Log::TraceMessages::On = 1;
    my ($writer, $ch_xmltv_id, $url, $day_obj) = @_;
    my $count = 0;
    my $next_day = 0;
    my $day = UnixDate($day_obj, '%Q');
    t "getting channel $ch_xmltv_id, date $day";
    my $ts;
    my $row;
    my $listingspage = tidy(get_nice($url));
    my $tabex = new HTML::TableExtract( depth => 1, count => 6 , keep_html => 1 );
    $tabex->parse($listingspage);
    foreach $ts ($tabex->table_states) {
	# t "Table found at ", join(',', $ts->coords),":\n";
	foreach $row ($ts->rows) {
	    #print "\nProcessing row containing:\n@$row[0]\n----";
	    if (@$row[0] =~ m/<font class=txt size=2><b>/) {
		#print "\nGrabbing $ch_xmltv_id from $url now!\n";
		my $newstart = $1 if @$row[0] =~ m!>\n?(\d.\.\d.)(?:</span>|)(?:</b>|)<br>!;
		die "didn't see start time in @$row[0]" if not defined $newstart;
		my $newstop = $1 if @$row[0] =~ m/>\n?[(]?(\d.\.\d.)[)]?<\/fon/;
		die "didn't see stop time in @$row[0]" if not defined $newstop;
		my $newtitle = $1 if @$row[1] =~ m/2><b>\n(.*)<\/b>/;
		die "didn't see title in @$row[0]" if not defined $newtitle;
		$newtitle =~ s!.*>([^<]+)!$1!;
		
		my $newdesc = $1 if @$row[1] =~ m/size=1>\n(.*)<br>\n<img/;
		$newdesc = encode_entities($newdesc) if $newdesc;
		# OK for desc to be missing.
		my $rerun = {} if $newtitle =~ s/\([Rr]\)//;
		my $normalsubs = 1 if $newtitle =~ s/\(t\)//;
		my $teletextsubs = 1 if $newtitle =~ s/\(ttv\)//;

		my ($eptotal, $ep, $epall);
		for ($newtitle) {
		    if (s/\(([0-9]+)\)//) {
			$eptotal = $1 - 1;
		    }
		    elsif (s/\(([0-9]+):([0-9]+)\)//) {
			($ep, $epall) = ($1 - 1, $2);
		    }
		    elsif (s/\(:([0-9]+)\)//) {
			$eptotal = $1 - 1;
		    }
		    s/\s+$//;
		}

		my $originaltitle = $1
		  if $newdesc =~ s/^\((.*)\) //;
		
		#$newdesc = " " if $newdesc eq "";
		#print "$newstart - $newstop - $newtitle - $newdesc - Day: $day\n";
		$newdesc = decode_entities($newdesc) if $newdesc;
		for ($newdesc) { s/^\s+//; s/\s+$// }
		$originaltitle = decode_entities($originaltitle) if $originaltitle;
		$newstart =~ m/(\d.)\.(\d.)/ or die;
		my $xmltvstart = utc_offset("$day$1${2}00", $TZ);
		
		$newstop =~ m/(\d.)\.(\d.)/ or die;
		my $xmltvstop = utc_offset("$day$1${2}00", $TZ);
		
		my $newxmltvstop;
		if (Date_Cmp($xmltvstart, $xmltvstop) > 0 ) {
		    $day = nextday($day);
		    $newstop =~ m/(\d.)\.(\d.)/ or die;
		    $xmltvstop = utc_offset("$day$1${2}00", $TZ);
		}
		my %prog = (	start 	=> $xmltvstart,
				stop	=> $xmltvstop,
				channel => $ch_xmltv_id);
		$prog{title} = [ [ $newtitle , $LANG ] , [ $originaltitle , "en" ] ] if $originaltitle;
		$prog{title} = [ [ $newtitle , $LANG ] ] if not $originaltitle;
		$prog{desc} = [ [ $newdesc , $LANG ] ] unless $newdesc eq "";
		push @{$prog{'episode-num'}}, [ " . $ep/$epall . " , "xmltv_ns" ] if $ep;
		push @{$prog{'episode-num'}}, [ $eptotal , "all-seasons" ] if $eptotal;
		$prog{subtitles} = [ { type => 'teletext' } ] if $teletextsubs;
		$prog{subtitles} = [ { type => 'onscreen' } ] if $normalsubs;
		$prog{'previously-shown'} = $rerun if defined $rerun;
		
		$writer->write_programme(\%prog);
		++$count;
	    }
	}	
    }
    return $count;
}

# get channel listing
sub get_channels {
    # my %channels;
    my $page = tidy(get_nice('http://fredag.dagbladet.no/tv/index.html'));

    my $chantable = new HTML::TableExtract( depth => 1 , count => 8 , keep_html => 1 );

    $chantable->parse($page);
    my $lx = new HTML::LinkExtractor;
    my %channels;
    foreach my $chants ($chantable->table_states) {
	foreach my $chrow ($chants->rows) {
	    foreach my $cell (@$chrow) {
		$lx->parse(\$cell);
		for my $link( @{ $lx->links } ) {
		    if (defined $$link{_TEXT}) {
			my $mylink = $$link{_TEXT} if defined $$link{_TEXT};
			my $kanalid = $1 if $mylink =~ m/kanal_id=(\d+)/;
			my $kanalname = $1 if $mylink =~ m/>(.+?)<\/a>/;
			$channels{$kanalid} = $kanalname;
		    }
		}
	    }
	}
    }


    # $channels{$channel_id} = $channel_name;
    return %channels;
}
sub getchandisplaynames( @ ) {
    my %to_get; foreach (@_) { $to_get{$_}++ && die }
    my %r;

    my $page = tidy(get_nice('http://fredag.dagbladet.no/tv/index.html'));

    my $chantable = new HTML::TableExtract( depth => 1 , count => 8 , keep_html => 1 );

    $chantable->parse($page);
    my $lx = new HTML::LinkExtractor;
    my %channels;
    foreach my $chants ($chantable->table_states) {
	foreach my $chrow ($chants->rows) {
	    foreach my $cell (@$chrow) {
		$lx->parse(\$cell);
		for my $link( @{ $lx->links } ) {
		    if (defined $$link{_TEXT}) {
			my $mylink = $$link{_TEXT} if defined $$link{_TEXT};
			if ($mylink =~ m/kanal_id=(\d+)/ and $to_get{$1}) {
			    my $ch_did = $1;
			    if ($mylink =~ m/>(.+?)<\/a>/) {
				my $kanalname = $1;
				for ($r{$ch_did}) {
				    warn "channel $ch_did seen twice in index page"
				      if defined;
				    $_ = $kanalname;
				}
			    }
			}
		    }
		}
	    }
	}
    }

    return %r;
}

# Bump a YYYYMMDD date by one.
sub nextday {
    my $d = shift;
    my $p = parse_date($d);
    my $n = DateCalc($p, '+ 1 day');
    return UnixDate($n, '%Q');
}
